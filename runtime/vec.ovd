module std

/// Vec is a dynamic array type. It is a growable, continous array.
pub struct Vec<T> {
    data    *mut T
    len     usize
    cap     usize
}

impl<T> Vec<T> {
    /// Return a new, empty vector with initial capacity reserved for cap elements
    pub fn with_cap(cap usize) -> Vec<T> {
        return Vec<T> {
            data:   __unsafe_ptr_cast GC_malloc(cap * __unsafe_sizeof T),
            len:    0,
            cap:    cap
        }
    }

    /// Return a new, empty vector
    pub fn new() -> Vec<T> {
        // limit initial capacity allocation to 32 bytes max or one element
        if __unsafe_sizeof T <= 4 {
            return with_cap(8)
        } elsif __unsafe_sizeof T <= 8 {
            return with_cap(4)
        } elsif __unsafe_sizeof T <= 16 {
            return with_cap(2)
        } else {
            return with_cap(1)
        }
    }

    /// Get the element in the vector at position index
    /// If the index is past the end of the vector, the function panics
    pub fn get(*self, index usize) -> T {
        if index >= self.len {
            core:panic()
        } else {
            return *(self.data __unsafe_ptr_add index)
        }
    }

    /// Get the number of element in the vector
    pub fn size(*self) -> usize {
        return self.len
    }

    /// Get the current capacity of the vector (the number of elements the vector can hold before it has to reallocate memory)
    pub fn cap(*self) -> usize {
        return self.cap
    }

    /// Set the capacity of the vector to the specified size
    pub fn set_cap(*mut self, cap usize) {
        if cap < self.len {
            core:panic()
        }
        self.cap = cap
        self.data = __unsafe_ptr_cast GC_realloc(__unsafe_ptr_cast self.data, self.cap * __unsafe_sizeof T)
    }

    /// Double the capacity of the vector
    fn expand(*mut self) {
        self.set_cap(self.cap * 2)
    }

    /// Expand the vector to fit the given number of elements
    fn expand_to_fit(*mut self, size usize) {
        while size > self.cap {
            self.expand()
        }
    }

    /// Insert a new element (data) at the end of the vector
    pub fn push(*mut self, data T) {
        self.expand_to_fit(self.len + 1)
        *(self.data __unsafe_ptr_add self.len) = data
        self.len += 1
    }

    /// Insert an element (data) at the specified index in the vector
    /// Panics if index > size()
    pub fn insert(*mut self, index usize, data T) {
        if index > self.len {
            core:panic()
        }
        self.len += 1
        // expand capacity if needed
        self.expand_to_fit(self.len)
        // move section after insertion location to make room
        mem:unsafe_move:<T>(self.data __unsafe_ptr_add (index + 1), self.data __unsafe_ptr_add index, self.len - index - 1)
        // insert data
        *(self.data __unsafe_ptr_add index) = data
    }

    /// Remove the element at the specified index in the vector
    /// Panics if index >= size()
    pub fn remove(*mut self, index usize) {
        if index >= self.len {
            core:panic()
        }
        self.len -= 1
        // move section after element to remove backwards
        mem:unsafe_move:<T>(self.data __unsafe_ptr_add index, self.data __unsafe_ptr_add (index + 1), self.len - index)
    }

    /// Remove and return the element at the end of the vector
    /// If the vector has no elements, the function panics
    pub fn pop(*mut self) -> T {
        if self.len == 0 {
            core:panic()
        }
        val res T = *(self.data __unsafe_ptr_add (self.len - 1))
        self.len -= 1
        return res
    }

    /// Get the element at the beginning of the vector
    pub fn front(*self) -> T {
        return self.get(0)
    }

    /// Get the element at the end of the vector
    pub fn back(*self) -> T {
        return self.get(self.size() - 1)
    }
}

fn test() -> Vec<*i32> {
    val a = 5
    mut v = [Vec<*i32>]:new()
    v.push(&a)

    return v
}
