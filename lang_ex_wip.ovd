/**
This is an example module. It demonstrates many of the features of ovid.

This is a doc comment, which means it is perserved as documentation for the next element in the program (in this case a module declaration).

Ovid code is split into modules. Each module has a name (split by :) and can contain many scopes inside of it.

The basic file layout (very much wip):
Modulefile
src/* -- source code
doc/*.md -- high level documentation materials
    The module documentation should probably go in doc/__mod.md, instead of here
bin/* -- generated binaries
**/
// sets the module for the current file
// TODO: module declaration unneeded. Allow optional top level scope declaration
module lang:ovid:exmpl

/// an example score
scope basic:vars {
    // variable declarations are automatically type inferred (and immutable)
    a := 1          // type i64
    b := "hello"    // type string
    // mutability modifiers
    c := mut 1      // type mut i64
    // references (mutable and immutable)
    d := &1         // type &i64
    e := &mut 1   // type &mut i64
    f := mut &1     // type mut &i64
    g := mut &mut 1 // type mut &mut i64
}

/// a function that calculates the sum of two numbers
fn sum (a i32, b i32) -> i32 {
    return a + b
}

/// function overloading
fn sum(a f32, b f32) -> f32 {
    return a + b
}

// control structures
fn test() {
    if cond {
        body
    } elsif cond {

    } else {

    }

    // infinite loop
    for {
        body
    }

    // while loop
    for cond {
        body
    }

    // iterators
    for i in iter {
        body
    }

    // three expression
    for init; cond; end {
        body
    }
}