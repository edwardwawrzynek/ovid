(5:1)	%5{ovidc_test:test1} = FUNCTIONDECLARE () -> i32 {
    (5:1)	BASICBLOCK @0 {
        (6:12)	%1 = INTLITERAL i32 1
        (6:16)	%2 = INTLITERAL i32 1
        (6:14)	%3 = BUILTINOPERATOR (i32, i32) -> i32 +
        (6:12)	%4 = FUNCTIONCALL i32 %3 (%1, %2)
        (6:5)	RETURN %4
    }
}
(9:1)	%11{ovidc_test:sum} = FUNCTIONDECLARE (a i64, b i64) -> i64 {
    (9:1)	BASICBLOCK @6 {
        (9:10)	%7{a} = ALLOCATION i64
        (9:17)	%8{b} = ALLOCATION i64
        (10:14)	%9 = BUILTINOPERATOR (i64, i64) -> i64 +
        (10:12)	%10 = FUNCTIONCALL i64 %9 (%7{a}, %8{b})
        (10:5)	RETURN %10
    }
}
(13:1)	%19{ovidc_test:test2} = FUNCTIONDECLARE () -> i32 {
    (13:1)	BASICBLOCK @12 {
        (14:20)	%13 = INTLITERAL i64 1
        (14:22)	%14 = INTLITERAL i64 2
        (14:16)	%15 = FUNCTIONCALL i64 %11{ovidc_test:sum} (%13, %14)
        (14:25)	%16 = INTLITERAL i64 3
        (14:12)	%17 = FUNCTIONCALL i64 %11{ovidc_test:sum} (%15, %16)
        (14:12)	%18 = BUILTINCAST i32 %17
        (14:5)	RETURN %18
    }
}
(17:1)	%22{ovidc_test:test3} = FUNCTIONDECLARE () -> bool {
    (17:1)	BASICBLOCK @20 {
        (18:12)	%21 = BOOLLITERAL bool true
        (18:5)	RETURN %21
    }
}
(21:1)	%32{ovidc_test:test4} = FUNCTIONDECLARE () -> i32 {
    (21:1)	BASICBLOCK @23 {
        (22:8)	%25 = FUNCTIONCALL bool %22{ovidc_test:test3} ()
        (22:8)	CONDITIONALJUMP %25 @26(true) @27(false)
    }
    (22:8)	BASICBLOCK @26 {
        (23:16)	%28 = INTLITERAL i32 1
        (23:9)	RETURN %28
        (22:8)	JUMP @24
    }
    (22:8)	BASICBLOCK @27 {
        (24:12)	%29 = BOOLLITERAL bool true
        (24:12)	CONDITIONALJUMP %29 @30(true) @24(false)
    }
    (24:12)	BASICBLOCK @30 {
        (25:16)	%31 = FUNCTIONCALL i32 %19{ovidc_test:test2} ()
        (25:9)	RETURN %31
        (24:12)	JUMP @24
    }
    (22:5)	BASICBLOCK @24 {
    }
}
